/**
 * @author generated by eTrice
 *
 * Header File of ActorClass FireMissile
 *
 */

#ifndef _TEMPLATEMODEL_FIREMISSILE_H_
#define _TEMPLATEMODEL_FIREMISSILE_H_

#include "modelbase/etActor.h"

/* include all referenced room classes */
#include "TemplateModel/fire.h"
#include "TemplateModel/sendInfoCriticalFL.h"
#include "etrice/api/timer/PTimer.h"

/*--------------------- begin user code ---------------------*/
#include "FreeRTOS.h"
						#include "task.h"
						#include <stdio.h>
						#include "pico/stdlib.h"
						#include <queue.h>
						#include "hardware/adc.h"
						#include "hardware/watchdog.h"
						#include "semphr.h"
						#include "hardware/i2c.h"
						#include "pico/binary_info.h"
						#include "lcd.h"
						
						#include <ctype.h>
						#include "ultrsonic.h"
						#include <string.h>
						

/*--------------------- end user code ---------------------*/

typedef struct FireMissile FireMissile;

/* const part of ActorClass (ROM) */
typedef struct FireMissile_const {
	#ifdef ET_MSC_LOGGER_ACTIVATE
		const char* instName;
	#endif
	
	/* simple ports */
	const firePort receiveFireCmd;
	const sendInfoCriticalFLPort receiveCrititcalInfo;

	/* data receive ports */

	/* saps */
	const PTimerConjPort timer;

	/* replicated ports */

	/* services */
} FireMissile_const;


/* constant for state machine data */
#define FIREMISSILE_HISTORY_SIZE 4

/* variable part of ActorClass (RAM) */
struct FireMissile {
	const FireMissile_const* ET_CONST_MEMBER constData;

	/* data send ports */

	/*--------------------- attributes ---------------------*/
	 bool criticalReportedWl;


	/* state machine variables */
	etInt16 state;
	etInt16 history[FIREMISSILE_HISTORY_SIZE];
};

void FireMissile_init(FireMissile* self);

void FireMissile_receiveMessage(void* self, const void* ifitem, const etMessage* msg);


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/


#endif /* _TEMPLATEMODEL_FIREMISSILE_H_ */

