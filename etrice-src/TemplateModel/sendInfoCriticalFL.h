/**
 * @author generated by eTrice
 *
 * Header File of ProtocolClass sendInfoCriticalFL
 * 
 */

#ifndef _TEMPLATEMODEL_SENDINFOCRITICALFL_H_
#define _TEMPLATEMODEL_SENDINFOCRITICALFL_H_

#include "etDatatypes.h"
#include "modelbase/etPort.h"


/* include all referenced room classes */


/* message IDs */
enum sendInfoCriticalFL_msg_ids {
	sendInfoCriticalFL_MSG_MIN = 0,
	sendInfoCriticalFL_IN_criticalOk = 1,
	sendInfoCriticalFL_IN_criticalNOK = 2,
	sendInfoCriticalFL_MSG_MAX = 3
};

/*--------------------- port structs and methods */
typedef etPort sendInfoCriticalFLPort;
typedef etReplPort sendInfoCriticalFLReplPort;




etInt32 sendInfoCriticalFLReplPort_getReplication(const sendInfoCriticalFLReplPort* self);
typedef etPort sendInfoCriticalFLConjPort;
typedef etReplPort sendInfoCriticalFLConjReplPort;


void sendInfoCriticalFLConjPort_criticalOk(const sendInfoCriticalFLConjPort* self);
void sendInfoCriticalFLConjReplPort_criticalOk_broadcast(const sendInfoCriticalFLConjReplPort* self);
void sendInfoCriticalFLConjReplPort_criticalOk(const sendInfoCriticalFLConjReplPort* self, int idx);
void sendInfoCriticalFLConjPort_criticalNOK(const sendInfoCriticalFLConjPort* self);
void sendInfoCriticalFLConjReplPort_criticalNOK_broadcast(const sendInfoCriticalFLConjReplPort* self);
void sendInfoCriticalFLConjReplPort_criticalNOK(const sendInfoCriticalFLConjReplPort* self, int idx);


etInt32 sendInfoCriticalFLConjReplPort_getReplication(const sendInfoCriticalFLConjReplPort* self);

/*--------------------- debug helpers */

/* get message string for message id */
#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	const char* sendInfoCriticalFL_getMessageString(int msg_id);
#endif


#endif /* _TEMPLATEMODEL_SENDINFOCRITICALFL_H_ */

