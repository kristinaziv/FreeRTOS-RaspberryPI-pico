/*******************************************************************************
 * Copyright (c) 2019 protos software gmbh (http://www.protos.de).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 *******************************************************************************/
 
RoomModel etrice.api.interrupt {

	import etrice.api.types.uint8

	ExternalType PInterruptConjPort -> "PInterruptConjPort"
	ExternalType etMessage -> "etMessage"
	ExternalType etHighPrioFunc -> "etHighPrioFunc"

	ProtocolClass PInterrupt {
		incoming {
			Message event()
		}
		conjugated PortClass
		{
			usercode '''#include "messaging/etMessageService.h"'''
			handle incoming event '''// the message should be sent via the fire operation !!'''
			Operation export(): PInterruptConjPort ref '''
				msg.address = self->peerAddress;
				msg.evtID = PInterrupt_IN_event;
				callback.func=(void (*)(void*))PInterruptConjPort_dispatch;
				callback.param=(void *)self;
				etMessageService_registerHighPrioFunc(self->msgService,&callback);
				return self;'''
			Operation dispatch() '''
				// this operation will be executed from the message service
				if (enable){
					enable=0;
					self->msgService->msgDispatcher(&msg);
				}'''
			Operation fire() '''
				// this method runs on interrupt level
				enable=1;
				etSema_wakeupFromISR(&self->msgService->executionSemaphore);'''
			Attribute msg: etMessage = "{0}"
			Attribute callback: etHighPrioFunc = "{0,0}"
			Attribute enable: uint8 = "0"
		}
	}
}