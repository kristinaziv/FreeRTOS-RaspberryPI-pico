/**
 * @author generated by eTrice
 *
 * Header File of ActorClass AContractMonitorBase
 *
 */

#ifndef _ETRICE_API_CONTRACTS_MONITORS_ACONTRACTMONITORBASE_H_
#define _ETRICE_API_CONTRACTS_MONITORS_ACONTRACTMONITORBASE_H_

#include "modelbase/etActor.h"

/* include all referenced room classes */
#include "etrice/api/contracts/monitors/PContractMonitorControl.h"


typedef struct AContractMonitorBase AContractMonitorBase;

/* const part of ActorClass (ROM) */
typedef struct AContractMonitorBase_const {
	#ifdef ET_MSC_LOGGER_ACTIVATE
		const char* instName;
	#endif
	
	/* simple ports */
	const PContractMonitorControlPort monitor_ctrl;

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
} AContractMonitorBase_const;


/* constant for state machine data */
#define ACONTRACTMONITORBASE_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct AContractMonitorBase {
	const AContractMonitorBase_const* ET_CONST_MEMBER constData;

	/* data send ports */

	/*--------------------- attributes ---------------------*/
	 bool _violation;
	 bool forwardInvalidMessages;


	/* state machine variables */
	etInt16 state;
	etInt16 history[ACONTRACTMONITORBASE_HISTORY_SIZE];
};

void AContractMonitorBase_init(AContractMonitorBase* self);

void AContractMonitorBase_receiveMessage(void* self, const void* ifitem, const etMessage* msg);


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/
 void AContractMonitorBase_onViolation(AContractMonitorBase* self, charPtr comment);


#endif /* _ETRICE_API_CONTRACTS_MONITORS_ACONTRACTMONITORBASE_H_ */

