/**
 * @author generated by eTrice
 *
 * Header File of ProtocolClass PContractMonitorControl
 * 
 */

#ifndef _ETRICE_API_CONTRACTS_MONITORS_PCONTRACTMONITORCONTROL_H_
#define _ETRICE_API_CONTRACTS_MONITORS_PCONTRACTMONITORCONTROL_H_

#include "etDatatypes.h"
#include "modelbase/etPort.h"


/* include all referenced room classes */


/* message IDs */
enum PContractMonitorControl_msg_ids {
	PContractMonitorControl_MSG_MIN = 0,
	PContractMonitorControl_OUT_violationStatus = 1,
	PContractMonitorControl_OUT_violationOccured = 2,
	PContractMonitorControl_IN_getAndResetStatus = 3,
	PContractMonitorControl_IN_setForwardInvalidMessages = 4,
	PContractMonitorControl_MSG_MAX = 5
};

/*--------------------- port structs and methods */
typedef etPort PContractMonitorControlPort;
typedef etReplPort PContractMonitorControlReplPort;


void PContractMonitorControlPort_violationStatus(const PContractMonitorControlPort* self, bool data);
void PContractMonitorControlReplPort_violationStatus_broadcast(const PContractMonitorControlReplPort* self, bool data);
void PContractMonitorControlReplPort_violationStatus(const PContractMonitorControlReplPort* self, int idx, bool data);
void PContractMonitorControlPort_violationOccured(const PContractMonitorControlPort* self);
void PContractMonitorControlReplPort_violationOccured_broadcast(const PContractMonitorControlReplPort* self);
void PContractMonitorControlReplPort_violationOccured(const PContractMonitorControlReplPort* self, int idx);


etInt32 PContractMonitorControlReplPort_getReplication(const PContractMonitorControlReplPort* self);
typedef etPort PContractMonitorControlConjPort;
typedef etReplPort PContractMonitorControlConjReplPort;


void PContractMonitorControlConjPort_getAndResetStatus(const PContractMonitorControlConjPort* self);
void PContractMonitorControlConjReplPort_getAndResetStatus_broadcast(const PContractMonitorControlConjReplPort* self);
void PContractMonitorControlConjReplPort_getAndResetStatus(const PContractMonitorControlConjReplPort* self, int idx);
void PContractMonitorControlConjPort_setForwardInvalidMessages(const PContractMonitorControlConjPort* self, bool data);
void PContractMonitorControlConjReplPort_setForwardInvalidMessages_broadcast(const PContractMonitorControlConjReplPort* self, bool data);
void PContractMonitorControlConjReplPort_setForwardInvalidMessages(const PContractMonitorControlConjReplPort* self, int idx, bool data);


etInt32 PContractMonitorControlConjReplPort_getReplication(const PContractMonitorControlConjReplPort* self);

/*--------------------- debug helpers */

/* get message string for message id */
#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	const char* PContractMonitorControl_getMessageString(int msg_id);
#endif


#endif /* _ETRICE_API_CONTRACTS_MONITORS_PCONTRACTMONITORCONTROL_H_ */

