/**
 * @author generated by eTrice
 *
 * Header File of ActorClass ATcpServer
 *
 */

#ifndef _ETRICE_API_TCP_ATCPSERVER_H_
#define _ETRICE_API_TCP_ATCPSERVER_H_

#include "modelbase/etActor.h"

/* include all referenced room classes */
#include "etrice/api/tcp/DTcpPayload.h"
#include "etrice/api/tcp/PTcpControl.h"
#include "etrice/api/tcp/PTcpPayload.h"

/*--------------------- begin user code ---------------------*/
#include "osal/etTcpSockets.h"
/*--------------------- end user code ---------------------*/

typedef struct ATcpServer ATcpServer;

/* const part of ActorClass (ROM) */
typedef struct ATcpServer_const {
	#ifdef ET_MSC_LOGGER_ACTIVATE
		const char* instName;
	#endif
	
	/* simple ports */
	const PTcpControlPort controlPort;
	const PTcpPayloadPort payloadPort;

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
} ATcpServer_const;


/* constant for state machine data */
#define ATCPSERVER_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct ATcpServer {
	const ATcpServer_const* ET_CONST_MEMBER constData;

	/* data send ports */

	/*--------------------- attributes ---------------------*/
	 int32 lastError;
	 DTcpPayload payloadRecvBuffer[32]
	;
	 etSocketServerData* server;


	/* state machine variables */
	etInt16 state;
	etInt16 history[ATCPSERVER_HISTORY_SIZE];
};

void ATcpServer_init(ATcpServer* self);

void ATcpServer_receiveMessage(void* self, const void* ifitem, const etMessage* msg);


/*--------------------- user constructor/destructor ---------------------*/
 void ATcpServer_ctor(ATcpServer* self);
 void ATcpServer_dtor(ATcpServer* self);

/*--------------------- operations ---------------------*/
 bool ATcpServer_hasError(ATcpServer* self);
 void ATcpServer_setErrorCode(ATcpServer* self, int32 value);


#endif /* _ETRICE_API_TCP_ATCPSERVER_H_ */

