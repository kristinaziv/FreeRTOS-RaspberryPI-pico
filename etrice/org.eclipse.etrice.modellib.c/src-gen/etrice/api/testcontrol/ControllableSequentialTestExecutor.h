/**
 * @author generated by eTrice
 *
 * Header File of ActorClass ControllableSequentialTestExecutor
 *
 */

#ifndef _ETRICE_API_TESTCONTROL_CONTROLLABLESEQUENTIALTESTEXECUTOR_H_
#define _ETRICE_API_TESTCONTROL_CONTROLLABLESEQUENTIALTESTEXECUTOR_H_

#include "modelbase/etActor.h"

/* include all referenced room classes */
#include "etrice/api/testcontrol/PTestControl.h"


typedef struct ControllableSequentialTestExecutor ControllableSequentialTestExecutor;

/* const part of ActorClass (ROM) */
typedef struct ControllableSequentialTestExecutor_const {
	#ifdef ET_MSC_LOGGER_ACTIVATE
		const char* instName;
	#endif
	
	/* simple ports */
	const PTestControlPort exeControl;

	/* data receive ports */

	/* saps */

	/* replicated ports */
	const etReplPort control;

	/* services */
} ControllableSequentialTestExecutor_const;


/* constant for state machine data */
#define CONTROLLABLESEQUENTIALTESTEXECUTOR_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct ControllableSequentialTestExecutor {
	const ControllableSequentialTestExecutor_const* ET_CONST_MEMBER constData;

	/* data send ports */

	/*--------------------- attributes ---------------------*/
	 int16 current;
	 bool overallSuccess;


	/* state machine variables */
	etInt16 state;
	etInt16 history[CONTROLLABLESEQUENTIALTESTEXECUTOR_HISTORY_SIZE];
};

void ControllableSequentialTestExecutor_init(ControllableSequentialTestExecutor* self);

void ControllableSequentialTestExecutor_receiveMessage(void* self, const void* ifitem, const etMessage* msg);


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/


#endif /* _ETRICE_API_TESTCONTROL_CONTROLLABLESEQUENTIALTESTEXECUTOR_H_ */

