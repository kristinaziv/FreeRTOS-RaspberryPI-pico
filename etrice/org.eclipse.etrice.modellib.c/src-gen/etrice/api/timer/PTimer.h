/**
 * @author generated by eTrice
 *
 * Header File of ProtocolClass PTimer
 * 
 */

#ifndef _ETRICE_API_TIMER_PTIMER_H_
#define _ETRICE_API_TIMER_PTIMER_H_

#include "etDatatypes.h"
#include "modelbase/etPort.h"

/*--------------------- begin user code ---------------------*/
#include "osal/etTime.h" 
typedef struct etTCB etTimerControlBlock; 
struct etTCB {
	etTime expTime;
	etTime pTime;
	int32 portIdx;
	uint16 timeId;
	etTimerControlBlock* next;
};

/*--------------------- end user code ---------------------*/

/* include all referenced room classes */
#include "etrice/api/timer/DStartTimer.h"


/* message IDs */
enum PTimer_msg_ids {
	PTimer_MSG_MIN = 0,
	PTimer_OUT_timeout = 1,
	PTimer_OUT__timeout = 2,
	PTimer_IN_startTimer = 3,
	PTimer_IN_startTimeout = 4,
	PTimer_IN_kill = 5,
	PTimer_IN__startTimer = 6,
	PTimer_IN__startTimeout = 7,
	PTimer_MSG_MAX = 8
};

/*--------------------- port structs and methods */
typedef etPort PTimerPort;
typedef etReplPort PTimerReplPort;

/* variable part of PortClass (RAM) */
typedef struct PTimerPort_var PTimerPort_var; 
struct PTimerPort_var {
	/*--------------------- attributes ---------------------*/
	 etTimerControlBlock tcb;
};

void PTimerPort_timeout(const PTimerPort* self);
void PTimerReplPort_timeout_broadcast(const PTimerReplPort* self);
void PTimerReplPort_timeout(const PTimerReplPort* self, int idx);
void PTimerPort__timeout(const PTimerPort* self, uint16 data);
void PTimerReplPort__timeout_broadcast(const PTimerReplPort* self, uint16 data);
void PTimerReplPort__timeout(const PTimerReplPort* self, int idx, uint16 data);


etInt32 PTimerReplPort_getReplication(const PTimerReplPort* self);
typedef etPort PTimerConjPort;
typedef etReplPort PTimerConjReplPort;

/* variable part of PortClass (RAM) */
typedef struct PTimerConjPort_var PTimerConjPort_var; 
struct PTimerConjPort_var {
	/*--------------------- attributes ---------------------*/
	 int8 status;
	 uint16 currentTimeId;
};

void PTimerConjPort_startTimer(const PTimerConjPort* self, uint32 data);
void PTimerConjReplPort_startTimer_broadcast(const PTimerConjReplPort* self, uint32 data);
void PTimerConjReplPort_startTimer(const PTimerConjReplPort* self, int idx, uint32 data);
void PTimerConjPort_startTimeout(const PTimerConjPort* self, uint32 data);
void PTimerConjReplPort_startTimeout_broadcast(const PTimerConjReplPort* self, uint32 data);
void PTimerConjReplPort_startTimeout(const PTimerConjReplPort* self, int idx, uint32 data);
void PTimerConjPort_kill(const PTimerConjPort* self);
void PTimerConjReplPort_kill_broadcast(const PTimerConjReplPort* self);
void PTimerConjReplPort_kill(const PTimerConjReplPort* self, int idx);
void PTimerConjPort__startTimer(const PTimerConjPort* self, DStartTimer* data);
void PTimerConjReplPort__startTimer_broadcast(const PTimerConjReplPort* self, DStartTimer* data);
void PTimerConjReplPort__startTimer(const PTimerConjReplPort* self, int idx, DStartTimer* data);
void PTimerConjPort__startTimeout(const PTimerConjPort* self, DStartTimer* data);
void PTimerConjReplPort__startTimeout_broadcast(const PTimerConjReplPort* self, DStartTimer* data);
void PTimerConjReplPort__startTimeout(const PTimerConjReplPort* self, int idx, DStartTimer* data);


void PTimerConjPort__timeout_receiveHandler(PTimerConjPort* self, const etMessage* msg, void * actor, etActorReceiveMessage receiveMessageFunc);
etInt32 PTimerConjReplPort_getReplication(const PTimerConjReplPort* self);

/*--------------------- debug helpers */

/* get message string for message id */
#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	const char* PTimer_getMessageString(int msg_id);
#endif


#endif /* _ETRICE_API_TIMER_PTIMER_H_ */

